import os

from vk_api.keyboard import VkKeyboard

from database import Database


class Keyboards:
    """
    –ö–ª–∞—Å—Å —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    """

    def __init__(self):
        self.db = Database(os.environ["DATABASE_URL"])

    @staticmethod
    def generate_main_menu(is_admin: bool):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        """
        kb = VkKeyboard()
        if is_admin:
            kb.add_button(label="–ü—Ä–∏–∑—ã–≤", payload={"button": "call"})
            kb.add_button(label="–§–∏–Ω–∞–Ω—Å—ã", payload={"button": "finances"})
            kb.add_line()
        kb.add_button(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", payload={"button": "schedule"})
        kb.add_line()
        kb.add_button(
            label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏", payload={"button": "mailings"},
        )
        if is_admin:
            kb.add_line()
            kb.add_button(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", payload={"button": "prefs"})
            kb.add_button(label="–í–µ–±", payload={"button": "web"})
        return kb.get_keyboard()

    @staticmethod
    def generate_schedule_keyboard():
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        kb = VkKeyboard()
        kb.add_button(label="–ù–∞ —Å–µ–≥–æ–¥–Ω—è", payload={"button": "today"})
        kb.add_button(label="–ù–∞ –∑–∞–≤—Ç—Ä–∞", payload={"button": "tomorrow"})
        kb.add_line()
        kb.add_button(
            label="–ù–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", payload={"button": "day_after_tomorrow"},
        )
        kb.add_button(
            label="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", payload={"button": "arbitrary"},
        )
        kb.add_line()
        kb.add_button(
            label="–ù–∞–∑–∞–¥", payload={"button": "home"},
        )
        return kb.get_keyboard()

    @staticmethod
    def empty():
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        """
        kb = VkKeyboard()
        return kb.get_empty_keyboard()

    @staticmethod
    def skip():
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        """
        kb = VkKeyboard()
        kb.add_button(label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", payload={"button": "skip"})
        return kb.get_keyboard()

    @staticmethod
    def cancel():
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
        """
        kb = VkKeyboard()
        kb.add_button(label="–û—Ç–º–µ–Ω–∞", payload={"button": "cancel"})
        return kb.get_keyboard()

    @staticmethod
    def generate_prefs_keyboard():
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞
        """
        kb = VkKeyboard()
        kb.add_button(label="–ß–∞—Ç—ã", payload={"button": "chats"})
        kb.add_line()
        kb.add_button(label="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º—ë–Ω –≤ –ø—Ä–∏–∑—ã–≤–µ", payload={"button": "names"})
        kb.add_line()
        kb.add_button(
            label="–ù–∞–∑–∞–¥", payload={"button": "home"},
        )
        return kb.get_keyboard()

    @staticmethod
    def generate_chat_prefs():
        kb = VkKeyboard()
        kb.add_button(
            label="–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤", payload={"button": "global_chat"}
        )
        kb.add_line()
        kb.add_button(
            label="–õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤", payload={"button": "local_chat"}
        )
        kb.add_line()
        kb.add_button(
            label="–ù–∞–∑–∞–¥", payload={"button": "prefs"},
        )
        return kb.get_keyboard()

    @staticmethod
    def generate_local_chat_prefs(chat):
        kb = VkKeyboard()
        if chat:
            kb.add_button(
                label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –±–µ—Å–µ–¥—É",
                payload={"button": "activate_test_chat"},
            )
        else:
            kb.add_button(
                label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –±–µ—Å–µ–¥—É",
                payload={"button": "activate_main_chat"},
            )
        kb.add_line()
        kb.add_button(label="–ù–∞–∑–∞–¥", payload={"button": "chats"})
        return kb.get_keyboard()

    def generate_global_chat_prefs(self, group: int):
        kb = VkKeyboard()
        chats = self.db.get_chats_of_group(group)
        for i, v in enumerate(chats):
            if len(kb.lines[-1]) == 2:
                kb.add_line()
            if v[1]:
                kb.add_button(
                    label="–û—Å–Ω–æ–≤–Ω–∞—è –±–µ—Å–µ–¥–∞",
                    payload={
                        "button": "configure_chat",
                        "group": group,
                        "chat_type": 1,
                        "chat_id": v[0],
                    },
                )
            else:
                kb.add_button(
                    label="–¢–µ—Å—Ç–æ–≤–∞—è –±–µ—Å–µ–¥–∞",
                    payload={
                        "button": "configure_chat",
                        "group": group,
                        "chat_type": 0,
                        "chat_id": v[0],
                    },
                )
        if len(chats) < 2 and self.db.get_cached_chats():
            kb.add_button(label="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", payload={"button": "reg_chat"})
        kb.add_line()
        kb.add_button(label="–ù–∞–∑–∞–¥", payload={"button": "chats"})
        return kb.get_keyboard()

    @staticmethod
    def reg_chat(chats, chats_info):
        kb = VkKeyboard()
        for i, v in enumerate(chats):
            if chats_info["items"]:
                kb.add_button(
                    label=chats_info["items"][0]["chat_settings"]["title"],
                    payload={"button": "add_chat", "chat_id": v},
                )
            else:
                kb.add_button(label="???", payload={"button": "add_chat", "chat_id": v})
            if len(kb.lines[-1]) == 2:
                kb.add_line()
        if kb.lines[-1]:
            kb.add_line()
        kb.add_button(label="–ù–∞–∑–∞–¥", payload={"button": "global_chat"})
        return kb.get_keyboard()

    def configure_chat(self, group: int, chat_type: int):
        kb = VkKeyboard()
        if not self.db.is_chat_active(group, chat_type):
            kb.add_button(
                label="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                payload={
                    "button": "activate_chat",
                    "group": group,
                    "chat_type": chat_type,
                },
            )
        if kb.lines[-1]:
            kb.add_line()
        kb.add_button(label="–ù–∞–∑–∞–¥", payload={"button": "global_chat"})
        return kb.get_keyboard()

    def generate_available_chat_types(self, chat_id: int, group: int):
        kb = VkKeyboard()
        if not self.db.is_main_chat_added(group):
            kb.add_button(
                label="–û—Å–Ω–æ–≤–Ω–æ–π", payload={"button": "reg_as_main", "chat_id": chat_id}
            )
        if not self.db.is_test_chat_added(group):
            kb.add_button(
                label="–¢–µ—Å—Ç–æ–≤—ã–π", payload={"button": "reg_as_test", "chat_id": chat_id}
            )
        kb.add_line()
        kb.add_button(label="–ù–∞–∑–∞–¥", payload={"button": "reg_chat"})
        return kb.get_keyboard()

    @staticmethod
    def generate_names_selector(status: bool):
        kb = VkKeyboard()
        if status:
            kb.add_button(label="–í—ã–∫–ª—é—á–∏—Ç—å", payload={"button": "off_using_names"})
        else:
            kb.add_button(label="–í–∫–ª—é—á–∏—Ç—å", payload={"button": "on_using_names"})
        kb.add_line()
        kb.add_button(
            label="–ù–∞–∑–∞–¥", payload={"button": "prefs"},
        )
        return kb.get_keyboard()

    @staticmethod
    def fin_category_menu():
        kb = VkKeyboard()
        kb.add_button(label="üìà –î–æ—Ö–æ–¥", payload={"button": "add_donate"})
        kb.add_button(label="üìâ –†–∞—Å—Ö–æ–¥", payload={"button": "add_expense"})
        kb.add_line()
        kb.add_button(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", payload={"button": "fin_stat"})
        kb.add_line()
        kb.add_button(label="üì¢ –î–æ–ª–∂–Ω–∏–∫–∏", payload={"button": "debtors"})
        kb.add_button(label="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", payload={"button": "fin_prefs"})
        kb.add_line()
        kb.add_button(label="üëàüèª –ù–∞–∑–∞–¥", payload={"button": "finances"})
        return kb.get_keyboard()

    @staticmethod
    def fin_prefs():
        kb = VkKeyboard()
        kb.add_button(label="–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", payload={"button": "update_summ"})
        kb.add_button(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", payload={"button": "update_name"})
        kb.add_line()
        kb.add_button(label="–£–¥–∞–ª–∏—Ç—å", payload={"button": "delete_expense"})
        kb.add_line()
        kb.add_button(
            label="–ù–∞–∑–∞–¥", payload={"button": "fin_category"},
        )
        return kb.get_keyboard()

    @staticmethod
    def inline_unsubscribe(m_id, sub_id):
        kb = VkKeyboard(inline=True)
        kb.add_button(
            label="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            payload={"button": "inline_unsubscribe", "slug": m_id, "user_id": sub_id},
        )
        return kb.get_keyboard()

    def generate_call_prompt(self, group: int):
        kb = self.generate_alphabet_keyboard(group)
        kb.add_line()
        kb.add_button(label="–û—Ç–º–µ–Ω–∞", payload={"button": "cancel"})
        kb.add_button(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", payload={"button": "save"})
        kb.add_line()
        kb.add_button(label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", payload={"button": "send_to_all"})
        return kb.get_keyboard()

    def generate_finances_prompt(self, group):
        kb = self.generate_alphabet_keyboard(group)
        kb.add_line()
        kb.add_button(label="–û—Ç–º–µ–Ω–∞", payload={"button": "cancel"})
        return kb.get_keyboard()

    def generate_alphabet_keyboard(self, group: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        """
        kb = VkKeyboard()
        letters = self.db.get_last_names_letters(group)
        for i, v in enumerate(letters):
            if len(kb.lines[-1]) < 4:
                kb.add_button(label=v, payload={"button": "letter", "letter": v})
            else:
                kb.add_line()
                kb.add_button(label=v, payload={"button": "letter", "letter": v})

        return kb

    def generate_names_keyboard(self, letter: str, group: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–º–∏–ª–∏—è–º–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–º–∏—Å—è –Ω–∞ –±—É–∫–≤—É (–∞—Ä–≥—É–º–µ–Ω—Ç)
        """
        names = self.db.get_list_of_names(letter=letter, group=group)
        kb = VkKeyboard()
        for i, v in enumerate(names):
            label = f"{v[2]} {v[1][0]}."
            kb.add_button(
                label=label, payload={"button": "student", "name": label, "id": v[0]},
            )
            if len(kb.lines[-1]) == 2:
                kb.add_line()
        if kb.lines[-1]:
            kb.add_line()
        kb.add_button(
            label="–ù–∞–∑–∞–¥", payload={"button": "back"},
        )
        return kb.get_keyboard()

    def generate_mailings_keyboard(self, group: int):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        """
        mailings = self.db.get_mailings_list(group)
        kb = VkKeyboard()
        for i, v in enumerate(mailings):
            kb.add_button(
                label=v[1], payload={"button": "mailing", "name": v[1], "id": v[0]},
            )
            if len(kb.lines[-1]) == 2:
                kb.add_line()
        if kb.lines[-1]:
            kb.add_line()
        kb.add_button(
            label="–ù–∞–∑–∞–¥", payload={"button": "home"},
        )
        return kb.get_keyboard()

    def generate_mailing_mgmt(self, user_id: int, is_admin: bool, m_id: int):
        uid = self.db.get_user_id(vk_id=user_id)
        status = self.db.get_subscription_status(m_id=m_id, user_id=uid)

        kb = VkKeyboard()
        if is_admin:
            kb.add_button(
                label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                payload={"button": "send_mailing", "mailing": m_id},
            )
        kb.add_button(
            label=f"{'–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' if status else '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'}",
            payload={
                "button": f"{'unsubscribe' if status else 'subscribe'}",
                "slug": m_id,
                "user_id": uid,
            },
        )
        kb.add_line()
        kb.add_button(
            label="–ù–∞–∑–∞–¥", payload={"button": "mailings"},
        )
        return kb.get_keyboard()

    def prompt(self, user_id: int = None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        """
        kb = VkKeyboard()
        kb.add_button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", payload={"button": "confirm"})
        kb.add_button(label="–û—Ç–º–µ–Ω–∞", payload={"button": "deny"})
        if user_id is not None and self.db.get_session_state(user_id) in [
            "call_configuring",
            "debtors_forming",
        ]:
            kb.add_line()
            kb.add_button(
                label="–°–º–µ–Ω–∏—Ç—å –±–µ—Å–µ–¥—É", payload={"button": "chconv_call"},
            )
            kb.add_line()
            kb.add_button(
                label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º—ë–Ω",
                payload={"button": "chnames_call"},
            )
        return kb.get_keyboard()

    def finances_main(self, group: int):
        kb = VkKeyboard()
        list_of_cats = self.db.get_list_of_finances_categories(group)
        for i, v in enumerate(list_of_cats):
            label = v[1]
            kb.add_button(
                label=label,
                payload={"button": "fin_category", "id": v[0], "name": v[1]},
            )
            if len(kb.lines[-1]) == 2:
                kb.add_line()
        if kb.lines[-1]:
            kb.add_line()
        kb.add_button(label="–ë–∞–ª–∞–Ω—Å", payload={"button": "balance"})
        kb.add_button(label="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é", payload={"button": "add_expense_cat"})
        kb.add_line()
        kb.add_button(label="–ù–∞–∑–∞–¥", payload={"button": "home"})
        return kb.get_keyboard()

    def generate_administrating_groups(self, admin_id):
        kb = VkKeyboard()
        groups = self.db.get_administrating_groups(admin_id)
        for i, v in enumerate(groups):
            label = v
            kb.add_button(
                label=label, payload={"button": "get_auth_link", "group": v},
            )
            if len(kb.lines[-1]) == 2:
                kb.add_line()
        if kb.lines[-1]:
            kb.add_line()
        kb.add_button(label="–ù–∞–∑–∞–¥", payload={"button": "home"})
        return kb.get_keyboard()

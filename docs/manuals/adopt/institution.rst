Подключение нового учебного заведения
=====================================

.. contents::

Создание сообщества
-------------------

Ботов ВКонтакте можно привязывать только к группам. Для её создания перейдите в раздел сообществ из бокового меню:

.. figure:: ../../_static/images/adopt/vk/groups.png
       :align: center
       :alt: Сообщества

Там нажмите на кнопку "Создать сообщество"

.. figure:: ../../_static/images/adopt/vk/create_group.png
       :align: center
       :alt: Создать сообщество

В открывшемся меню выберите "Группа по интересам"

.. figure:: ../../_static/images/adopt/vk/group_selector.png
       :align: center
       :alt: Выбор типа группы

На ваше усмотрение заполните данные группы

.. figure:: ../../_static/images/adopt/vk/filling_data.png
       :align: center
       :alt: Заполнение данных

Перейдите в раздел "Управление" нового сообщества

.. figure:: ../../_static/images/adopt/vk/managing_button.png
       :align: center
       :alt: Кнопка Управление

Затем в подраздел "Работа с API"

Здесь нужно создать токен сообщества со следующими правами:

*управление сообществом, сообщения сообщества, фотографии, документы, стена*

.. figure:: ../../_static/images/adopt/vk/create_token.png
       :align: center
       :alt: Создание токена

Скопируйте себе этот токен, в дальнейшем он нам понадобится.

.. warning::
	Никому не передавайте этот токен! Он позволяет управлять вашим сообществом


Перейдите во вкладку Long Poll API и включите его. Выберите версию API 5.103

.. figure:: ../../_static/images/adopt/vk/long_poll_api.png
       :align: center
       :alt: Параметры Long Poll API

Затем во вкладке типы событий установите все галочки

Далее, в разделе "Сообщения" нужно включить сообщения сообщества.

По желанию можно настроить приветствие. Это сообщение, которое получит пользователь, впервые открывший диалог с ботом.

Нажмите "Сохранить".

.. figure:: ../../_static/images/adopt/vk/messages.png
       :align: center
       :alt: Настройка сообщений

Затем, в подразделе "Настройки для бота" включите "Возможности ботов" и выберите обе галочки.

.. figure:: ../../_static/images/adopt/vk/bot_messages_config.png
       :align: center
       :alt: Настройка сообщений

Снова нажмите "Сохранить"

Создайте отдельную беседу для тестирования и обучения администраторов.

Вернитесь к сообществу. У вас появится меню с одной кнопкой - "Добавить в беседу".

.. figure:: ../../_static/images/adopt/vk/menu.png
       :align: center
       :alt: Меню

Нажмите на неё и выберите обе беседы, в которых должен работать бот.

Вернитесь к беседам. Откройте список участников и найдите среди них своего бота. Сделайте его администратором беседы, чтобы дать ему доступ на написание сообщений в этой беседе. (это может сделать только действующий администратор или создатель)

Это действие нужно повторить с обоими беседами.

Получение токена пользователя
-----------------------------

Токен пользователя необходми для автоматической смены статуса группы с номером версии.

.. seealso::
	
	Документация ВКонтакте о получении токена пользователя `<https://vk.com/dev/implicit_flow_user>`_

Настройка компьтера для работы
------------------------------

1. `Зарегистрируйтесь <https://github.com/join>`_ на Github, если у вас еще нет там аккаунта (он понадобится для получения уведомлений о выходе новых версий)

2. Перейдите на страницу с репозиторием нажмите кнопку Watch, чтобы получать уведомления об обновлениях на электропочту. Выберите вариант Releases only, если не собираетесь участвовать в развитии основной ветки проекта

3. Затем нажмите кнопку Fork. Репозиторий скопируется в ваш аккаунт. Далее вы будете работать из своей копии.

4. Установите Git на свой компьютер.

	Для Windows используйте `Git For Windows <https://github.com/git-for-windows/git/releases/latest>`_

	В Linux используйте стандартный менеджер пакетов

	.. code-block:: shell

		sudo pacman -S git # В Arch

	или

	.. code-block:: shell

		sudo apt install git # В Ubuntu

5. Настройте Git

	.. code-block:: shell
		
		git config --global user.name ваше_имя

		git config --global user.email ваша_электропочта_с_github

6. `Установите <https://www.python.org/downloads/release/python-382/>`_ Python, если он еще не установлен

	(В установщике для Windows важно указать галочку Add Python to PATH)

Получение исходного кода бота
-----------------------------

1. Создайте папку в которой будет хранится исходный код бота. Перейдите в нее из командной строки.

2. Загрузите последнюю доступную версию бота:

	.. code-block:: shell

		git clone https://github.com/ваш_ник/ralph

		cd ralph

Настройка виртуального окружения
--------------------------------

1. Создадим виртуальное окружение в папке с ботом

	.. code-block:: shell

		python -m venv venv

2. Активируем его

	На Windows:

		.. code-block:: shell

			venv/Scripts/activate

	На Linux:

		.. code-block:: shell

			source venv/bin/activate

Модификация кода
----------------

Код написан без жёсткой привязки к конкретному учереждению. Его можно легко адаптировать под любые нужды.

Модуль получения расписания хранится в файле `scheduler.py <https://github.com/dadyarri/ralph/blob/master/scheduler.py>`_.

Документация по этому модулю находится в отдельном `файле <../../code/scheduler>`_.

Так же, для локального тестирования нужно создать файл **.env**, где будут записаны переменные окружения.

Чтобы сохранить в репозитории сделанные изменения, нужно сделать коммит:

Сохраним изменения:

.. code-block:: shell

	git add .

И создадим коммит:

.. code-block:: shell

	git commit -m "<краткое описание сделанных вами изменений>"

Отправим изменения на сервер

.. code-block:: shell

	git push origin master

Настройка переменных окружения
------------------------------

Переменные окружения - это особый файл с секретными данными, которые нельзя нигде публиковать.

В случае с Ральфом там хранится токен сообщества, токен администратора, URL доступа к базе данных, и для удобства - настройки модуля логгирования, идентификатор сообщества с ботом.

Вот готовый шаблон файла с переменными окружения:

.. code-block:: shell

	DATABASE_URL="<ссылка доступа к базе данных. Ниже будет сказано, как её получить>"
	GID_ID="<идентификатор группы с ботом>"
	LOG_FMT="%(levelname)s: %(message)s" # Формат логов
	LOG_LEVEL="20" # Уровень логгирования. Указывает на то, логи какого уровня печатать. Подробнее здесь: `<https://docs.python.org/3/library/logging.html#levels>`_
	VK_TOKEN="<токен сообщества>"
	VK_USER_TOKEN="<токен администратора. Нужен для автоматического изменения номера версии в статусе группы>"

В случае, если вы работаете в `PyCharm <https://www.jetbrains.com/ru-ru/pycharm/>`_ для локального запуска бота вы можете использовать расширение `EnvFile <https://plugins.jetbrains.com/plugin/7861-envfile>`_ (Без него вы будете получать ошибку KeyError, говорящую о том, что не была найдена переменная окружения)

Выгрузка на хостинг
-------------------

Я предлагаю использовать в качестве хостинга `Heroku <https://heroku.com>`_. У них есть бесплатный тариф, но с ограничением по трафику в 550 часов / месяц. По моему опыту этого достаточно. Для работы с Heroku нужно:

- `зарегистрировать <https://signup.heroku.com/>`_ аккаунт
- установить `CLI <https://devcenter.heroku.com/articles/heroku-cli>`_

Все действия из списка ниже нужно выполнять в папке Ralph со всеми исходниками бота

1. Авторизуемся в CLI:

.. code-block:: shell

	heroku auth

2. Создаём приложение:

.. code-block:: shell

	heroku create

Имя приложения будет сгенерировано автоматически.

3. Подключаем к приложению базу данных PostgreSQL:

.. code-block:: shell

	heroku addons:create heroku-postgresql:hobby-dev

4. Получим ссылку для доступа к базе данных

.. code-block:: shell

	heroku config:get DATABASE_URL

5. Скопируем всю ссылку и вставим в файл **.env**

6. Настроим переменные окружения на сервере:

.. code-block:: shell

	heroku config:set GID_ID=идентификатор вашей группы
	heroku config:set LOG_FMT=%(levelname)s: %(message)s
	heroku config:set LOG_LEVEL=20
	heroku config:set VK_TOKEN=токен сообщества
	heroku config:set VK_USER_TOKEN=токен администратора

8. Теперь код можно выгрузить на сервер:

.. code-block:: shell

	git push heroku master


9. И запустить:

.. code-block:: shell

	heroku ps:scale bot=1 sch=1

Загрузка исходного кода веб-интерфейса
--------------------------------------

1. Создайте папку в которой будет хранится исходный код веб-интерфейса. (Она не должна находиться в папке с ботом) Перейдите в нее из командной строки.

2. Загрузите последнюю доступную версию веб-интерфейса:

	.. code-block:: shell

		git clone https://github.com/dadyarri/ralph_cms

		cd ralph_cms

3. Скопируйте файл **.env** из папки с ботом в папку с веб-интерфейсом

Выгрузка веб-интерфейса на сервер
---------------------------------

1. Создаём приложение:

.. code-block:: shell

	heroku create

Имя приложения будет сгенерировано автоматически.

2. Настроим переменные окружения на сервере:

.. code-block:: shell

	heroku config:set GID_ID=идентификатор вашей группы
	heroku config:set LOG_FMT=%(levelname)s: %(message)s
	heroku config:set LOG_LEVEL=20
	heroku config:set VK_TOKEN=токен сообщества
	heroku config:set VK_USER_TOKEN=токен администратора
	heroku config:set DATABASE_URL=ссылка из файла .env

8. Теперь код можно выгрузить на сервер. Запуск произойдет автоматически:

.. code-block:: shell

	git push heroku master


Бот готов к работе. Теперь осталось создать группу со студентами и настроить её.

.. seealso::

	`Создание группы <group.html>`_
